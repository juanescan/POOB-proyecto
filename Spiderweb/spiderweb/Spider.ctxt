#BlueJ class context
comment0.target=Spider
comment0.text=\r\n\ \ \r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=size\ xStrand\ yStrand\ strand\ nStrands\ radius\ centerX\ centerY\ strands
comment1.target=Spider(int,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ java.util.Map)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Spider\r\n\ @param\ xStrand\ x\ part\ of\ the\ first\ Coordenate\ of\ the\ bridge\ \ and\ \ yStrand\ y\ part\ of\ the\ first\ Coordenate\ of\ the\ bridge\r\n\ @param\ strand\ is\ the\ strand\ that\ the\ spider\ was\ sit\r\n
comment10.params=distance\ firstStrand
comment10.target=int\ findCoordenateX(int,\ int)
comment10.text=\r\n\ Find\ the\ new\ coordenate\ x\r\n\ @param\ distance\ is\ the\ distance\ of\ the\ new\ point\ \r\n\ @param\ firstStrand\ is\ to\ select\ in\ what\ strand\ calculate\ the\ value\ of\ coordenate\ x\r\n
comment11.params=distance\ firstStrand
comment11.target=int\ findCoordenateY(int,\ int)
comment11.text=\r\n\ Find\ the\ new\ coordenate\ y\r\n\ @param\ distance\ is\ the\ distance\ of\ the\ new\ point\ \r\n\ @param\ firstStrand\ is\ to\ select\ in\ what\ strand\ calculate\ the\ value\ of\ coordenate\ x\r\n
comment12.params=x\ y
comment12.target=double\ distanceToAnyObject(int,\ int)
comment12.text=\r\n\ Calculate\ the\ distance\ of\ the\ spider\ to\ any\ coordenate\r\n\ @return\ the\ distance\ of\ the\ spider\ to\ that\ coordenate\r\n
comment13.params=x\ y
comment13.target=void\ move(int,\ int)
comment13.text=\r\n\ move\ the\ spider\ to\ a\ specific\ coordenate\ \r\n
comment14.params=xPos\ yPos
comment14.target=boolean\ spiderInAPosition(int,\ int)
comment14.text=\r\n\ Determinate\ if\ the\ spider\ is\ in\ a\ certain\ position\r\n\ @return\ boolean,\ if\ the\ spider\ is\ in\ that\ position\ return\ true\ else\ return\ false\ \r\n
comment15.params=strand\ bridgesByColor
comment15.target=java.lang.String\ bridgeColorToMove(int,\ java.util.Map)
comment15.text=\r\n\ Find\ and\ return\ the\ color\ of\ the\ bridge\ that\ of\ the\ spider\ is\ going\ to\ walk\r\n\ @return\ the\ color\ of\ the\ bridge\r\n
comment16.params=strand\ bridgesByColor
comment16.target=java.lang.Integer\ bridgeDir(int,\ java.util.Map)
comment16.text=\r\n\ Determinate\ the\ direction\ of\ the\ spider\ going\ to\ cross\ one\ bridge\r\n\ return\ int,\ -1\ if\ dont\ exist\ bridge\ that\ fulfill\ the\ condition,\ 1\ if\ going\ to\ cross\ the\ bridge\ is\ to\ the\ start\ point\ of\ the\ bridge\ to\ the\ final\ point,\ 2\ if\ going\ to\ cross\ the\ bridge\ is\ to\ end\ point\ of\ the\ bridge\ to\ the\ start\ point\r\n
comment17.params=color\ dir\ bridgesByColor\ colorAndStrand\ spiderweb
comment17.target=void\ spiderWalkCase1(java.lang.String,\ int,\ java.util.Map,\ java.util.Map,\ spiderWeb)
comment17.text=\r\n\ Spider\ Move\ in\ the\ bridge\ in\ the\ case\ that\ strand\ <\ strands\r\n
comment18.params=color\ dir\ bridgesByColor\ colorAndStrand\ spiderweb
comment18.target=void\ spiderWalkCase2(java.lang.String,\ int,\ java.util.Map,\ java.util.Map,\ spiderWeb)
comment18.text=\r\n\ Spider\ move\ in\ the\ bridge\ in\ the\ case\ that\ strand\ \=\=\ strands\r\n
comment19.params=color\ dir\ spots
comment19.target=void\ spiderWalkCase3(java.lang.String,\ int,\ java.util.Map)
comment19.text=\r\n\ Spider\ move\ in\ the\ bridge\ in\ the\ case\ that\ not\ have\ valid\ bridges\r\n
comment2.params=
comment2.target=void\ makeVisible()
comment2.text=\r\n\ Make\ visible\ the\ spider\r\n
comment20.params=color\ dir\ bridgesByColor\ colorAndStrand\ spiderweb
comment20.target=void\ spiderWalkCase4(java.lang.String,\ int,\ java.util.Map,\ java.util.Map,\ spiderWeb)
comment20.text=\r\n\ Spider\ move\ in\ the\ bridge\ in\ the\ case\ that\ strand\ \=\=\ 1\r\n
comment21.params=bridgesByColor\ colorAndStrand\ spiderweb\ spots
comment21.target=void\ spiderWalkTrue(java.util.Map,\ java.util.Map,\ spiderWeb,\ java.util.Map)
comment21.text=\r\n\ Determinate\ what\ is\ the\ case\ that\ the\ spider\ going\ to\ walk\ in\ case\ that\ advance\ was\ true\r\n
comment22.params=bridgesByColor\ colorAndStrand\ spiderweb
comment22.target=void\ spiderWalkFalse(java.util.Map,\ java.util.Map,\ spiderWeb)
comment22.text=\r\n\ Determinate\ what\ is\ the\ case\ that\ the\ spider\ going\ to\ walk\ in\ case\ that\ advance\ was\ false\r\n
comment23.params=strand\ bridgesByColor
comment23.target=java.lang.String\ bridgeColorToMoveFalse(int,\ java.util.Map)
comment23.text=\r\n\ Find\ and\ return\ the\ color\ of\ the\ bridge\ that\ of\ the\ spider\ is\ going\ to\ walk\ in\ case\ that\ advance\ was\ false\r\n\ @return\ the\ color\ of\ the\ bridge\r\n
comment24.params=strand\ bridgesByColor
comment24.target=int\ bridgeDirFalse(int,\ java.util.Map)
comment24.text=\r\n\ Determinate\ the\ direction\ of\ the\ spider\ going\ to\ cross\ one\ bridge\ in\ case\ that\ advance\ was\ false\r\n\ return\ int,\ -1\ if\ dont\ exist\ bridge\ that\ fulfill\ the\ condition,\ 1\ if\ going\ to\ cross\ the\ bridge\ is\ to\ the\ start\ point\ of\ the\ bridge\ to\ the\ final\ point,\ 2\ if\ going\ to\ cross\ the\ bridge\ is\ to\ end\ point\ of\ the\ bridge\ to\ the\ start\ point\r\n
comment25.params=color\ dir
comment25.target=void\ spiderWalkCaseFalse(java.lang.String,\ int)
comment25.text=\r\n\ Spider\ move\ in\ the\ bridge\ in\ the\ case\ that\ not\ have\ valid\ bridges\ and\ advance\ was\ fals\r\n
comment26.params=
comment26.target=void\ deletePath()
comment26.text=\r\n\ Delete\ all\ paths\ that\ made\ the\ spider\r\n
comment27.params=x1\ y1\ x2\ y2
comment27.target=void\ createPath(int,\ int,\ int,\ int)
comment27.text=\r\n\ Create\ a\ representation\ of\ a\ path\ traversed\ by\ the\ spider\r\n
comment28.params=unusedBridges
comment28.target=java.util.ArrayList\ unusedBridges(java.util.Map)
comment28.text=\r\n\ Return\ the\ bridges\ that\ the\ spider\ dont\ use\r\n\ @return\ ArrayList\ of\ Strings\ that\ are\ the\ color\ of\ the\ bridges\ \r\n
comment29.params=
comment29.target=int\ getCenterX()
comment3.params=
comment3.target=void\ makeInvisible()
comment3.text=\r\n\ Make\ invisible\ the\ spider\r\n
comment30.params=
comment30.target=int\ getCenterY()
comment31.params=
comment31.target=java.util.ArrayList\ lastPath()
comment4.params=
comment4.target=void\ organize()
comment4.text=\r\n\ Organize\ the\ spider\ to\ keep\ the\ shape\r\n
comment5.params=
comment5.target=int\ getX()
comment5.text=\r\n\ Get\ the\ xPosition\ of\ spider\r\n\ @return\ coordenate\ x\ of\ the\ spider\r\n
comment6.params=
comment6.target=int\ getY()
comment6.text=\r\n\ Get\ the\ yPosition\ of\ spider\r\n\ @return\ coordenate\ y\ of\ the\ spider\r\n
comment7.params=newStrand
comment7.target=void\ setStrand(int)
comment7.text=\r\n\ Change\ the\ strand\ of\ the\ spider\r\n
comment8.params=
comment8.target=int\ getStrand()
comment8.text=\r\n\ Get\ the\ strand\ in\ which\ the\ spider\ is\r\n
comment9.params=index
comment9.target=double\ getAngleByIndex(int)
comment9.text=\r\n\ Get\ angle\ in\ the\ hashmap\r\n\ @param\ index\ is\ the\ number\ of\ the\ strand\r\n
numComments=32
